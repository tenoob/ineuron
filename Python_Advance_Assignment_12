Q1. Does assigning a value to a string&#39;s indexed character violate Python&#39;s string immutability?
Ans.	 a string is immutable. You cannot overwrite the values of immutable objects. However, you can assign the variable again. It's not modifying the string object; it's creating a new string object.


Q2. Does using the += operator to concatenate strings violate Python&#39;s string immutability? Why or why not?
Ans.	It violates the rules of how ID values and += are supposed to work - the ID values produced with the optimization in place would be not only impossible, but prohibited, with the unoptimized semantics - but the developers care more about people who would see bad concatenation performance and assume Python sucks.

Q3. In Python, how many different ways are there to index a character?
Ans.	Python uses zero-based indexing. That means, the first element(value 'red') has an index 0, the second(value 'green') has index 1, and so on.

Q4. What is the relationship between indexing and slicing?
Ans.	Indexing is used to obtain individual elements. Slicing is used to obtain a sequence of elements. Indexing and Slicing can be be done in Python Sequences types like list, string, tuple, range objects.

Q5. What is an indexed character’s exact data type? What is the data form of a slicing-generated substring?
Ans. the datatype of the  indexed character  will be one of the primary datatype means if it is a character then  it wil be a char or if a number then a integer. For a sliced substring  if it was a part of a list then it will be a list  if a string then a string.

Q6. What is the relationship between string and character ‘types’ in Python?
Ans.	Strings are arrays of bytes representing Unicode characters. However, Python does not have a character data type, a single character is simply a string with a length of 1. Square brackets can be used to access elements of the string

Q7. Identify at least two operators and one method that allow you to combine one or more smaller strings to create a larger string.
Ans.	+ and || (concatenation operator) are the operator and concat() method is used to combine smaller strings to create a larger string.


Q8. What is the benefit of first checking the target string with in or not in before using the index method to find a substring?
Ans.	it checks if the substring is present in the string or not.

Q9. Which operators and built-in string methods produce simple Boolean (true/false) results?
Ans.  equality operator  and toString(), startswith() and endswith() function return boolean results.
